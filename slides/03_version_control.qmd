---
title: "Version Control"
subtitle: "2025 DSS Bootcamp"
author: "Colin Rundel"
institute: ""
format: 
  revealjs:
    self-contained: true
    slide-number: true
    theme: [default, custom.scss]
execute:
  echo: true
---

# Preliminaries

## GitHub account

::: {style="font-size: 80%;"}
- Create a GitHub account (unless you already have one) on [https://github.com/](https://github.com/)

- One day you might want to show off your work, so choose a username you will be ok with disclosing to a future employer.

Some suggestions: 

  - Incorporate your actual name.

  - Shorter is better than longer.

  - Be as unique as possible in as few characters as possible. In some settings GitHub auto-completes or suggests usernames.

  - Make it timeless. Don't highlight your current university, employer, or place of residence.

  - Avoid words laden with special meaning in programming.
:::

## Accessing RStudio Workbench

To get started as quickly as possible, the preferred method is to use DSS RStudio server(s).

To access RStudio Workbench:

1.  Navigate to <https://rstudio.stat.duke.edu>
2.  Log-in with your Duke NetID and password.

If you are having trouble accessing RStudio Workbench see the next slide.

::: aside
If off campus, use the VPN to create a secure connection from your computer to Duke. <br/>
If you are on campus, be sure you are connected to the DukeBlue network.
:::


## DSS RStudio alternatives

If you cannot access RStudio via the DSS servers:

- Make sure you are not using a custom DNS server

    - e.g. `1.1.1.1` or `8.8.8.8`

- Use a Docker container from Duke OIT

    1.  Go to <https://cmgr.oit.duke.edu/> and login
    2.  Select `Reserve a Container` and find `RStudio (statistics application with R Markdown and knitr support)`
    3.  Click the link under my reservations to create your environment

- Install R and RStudio locally on your computer

    - Download R on your computer [here](http://archive.linux.duke.edu/cran/)
    - Download RStudio [here](https://www.rstudio.com/products/rstudio/download/#download)


## Bootcamp materials

- Everything from this computing bootcamp is available in the GitHub repository: [https://github.com/dukestatsci/computing_bootcamp_2025](https://github.com/dukestatsci/computing_bootcamp_2025)

- You'll learn how to get this on your computer shortly.

# git and GitHub

## Why version control?

::: columns
::: {.column width="50%"}
- Simple formal system for tracking changes to a project over time

- Time machine for your projects

    - Track blame and/or praise
    - Remove the fear of breaking things

- Learning curve can be a bit steep, but when you need it you *REALLY* need it
:::

::: {.column width="50%"}
![](images/local-vc-system.png)
:::
:::

## Why git?

:::: {.columns}
::: {.column width="50%"}
- Distributed

    - Work online or offline
    - Collaborate with large groups

- Popular and Successful

    - Active development
    - Shiny new tools and ecosystems
    - Fast

- Tracks any type of file

- Branching

    - Smarter merges
:::

::: {.column width="50%"}
```{r echo=FALSE, out.width="100%"}
knitr::include_graphics("images/distributed-vc-system.png")
```
:::
::::


## Verifying git exists

git is already set-up on the DSS server(s). In the terminal tab you can verify this by running:

``` bash
[cr173@hypatia ~]$ git --version
```
```
## git version 2.20.1
```

<br/>

```{bash eval=FALSE}
[cr173@hypatia ~]$ which git
```

```
## /usr/bin/git
```

::: aside
To install git on your own computer follow the directions in [Happy Git and GitHub for the useR](https://happygitwithr.com/install-git.html).
:::


## Git sitrep

Within R we can also use the `usethis` package to get a helpful summary of the current git configuration,

```{r}
#| eval: false
usethis::git_sitrep()
```

```
## Git config (global)
## ● Name: <unset>
## ● Email: <unset>
## ● Vaccinated: FALSE
## ℹ See `?git_vaccinate` to learn more
## ℹ Defaulting to https Git protocol
## ● Default Git protocol: 'https'
## GitHub
## ● Default GitHub host: 'https://github.com'
## ● Personal access token for 'https://github.com': <unset>
## x Call `gh_token_help()` for help configuring a token
## Git repo for current project
## ℹ No active usethis project
```

# git and GitHub live demo

## Configure git

The following will tell git who you are, and other common configuration tasks.

``` r
usethis::use_git_config(
  user.name = "Colin Rundel",
  user.email = "rundel@gmail.com",
  push.default = "simple"
)
```

You will need to do this configuration once on each machine in which you use git (e.g. the server and your laptop).

This can also be done via the terminal with,

```bash
git config --global user.name "Colin Rundel"
git config --global user.email "rundel@gmail.com"
git config --global push.default simple
```


::: aside
All of these values will be saved in the `.gitconfig` file in your home directory
:::

## Configure git verification

To verify you configured git correctly, run

```r
usethis::git_sitrep()
```
```
## Git config (global)
## ● Name: 'Colin Rundel'
## ● Email: 'rundel@gmail.com'
## ● Vaccinated: FALSE
## ℹ See `?git_vaccinate` to learn more
## ● Default Git protocol: 'https'
## GitHub
## ● Default GitHub host: 'https://github.com'
## ● Personal access token for 'https://github.com': <unset>
## x Call `gh_token_help()` for help configuring a token
## Git repo for current project
## ℹ No active usethis project
```

You should see output similar to above with your details.


## Configure SSH and GitHub (authentication)

We will be authenticating with GitHub using SSH via public / private keys. We can create a new key pair (if necessary) by running the following in RStudio's *console*:

```{r eval=FALSE}
credentials::ssh_setup_github()
```

. . .

```
## No SSH key found. Generate one now? 
## 
## 1: Yes
## 2: No
## 
## Selection: 1
## Generating new RSA keyspair at: /home/guest/.ssh/id_rsa
## Your public key:
## 
##  ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/wH7pT3UXdOMJSX2wMaPVTyGnYkS8OPmcfjct6h8Q+44/9UG3sOibjjUCxIxVeCWAoYFB0rDI3/Ljf2EWozLlpeGzAe7xsg6A+MHtUObZnfzXSB/NnOhZymD2u8Nh+py07aojVdKAPBkRH3nHA+rljidc3gXZkqseetYEI1N79OQUshp2P+Qm6Vab4I5OCnfAwLFkR7Sw7J9hvZN1qUmM0DB0WTWSlNmPSMsASMe/6Nz30IRoBh35Z7tgF79rlIW385giCkEeD20Le9EOueGoTWarJWylE1RWnUyig2mZ9JK/rYTw4KBXacPhBwn+MgGC+r8xY5IEX78xkeXW9q2z #<<
## 
## Please copy the line above to GitHub: https://github.com/settings/ssh/new
## Would you like to open a browser now? 
## 
## 1: Yes
## 2: No
## 
## Selection: 1
```


## Getting started today

In order to get started, you need to obtain today's files from GitHub. The steps below will give you access.

1.  Log in to GitHub

2.  Navigate to <https://github.com/dukestatsci/computing_bootcamp_2025>

3.  Fork the repository

4.  Copy the link under `Clone or Download` to clone with *SSH*.

5.  In RStudio go to `File > New Project > Version Control > Git`

6.  Paste the URL, that you copied in step 4, in the box under `Repository URL`

You now should have all the files in the repository in a directory on the server or your own computer.


## Introduction to git

![](images/git_6_commands.jpeg){fig-align="center"}


## git Verbs (commands)

- `status` - returns details about the current status of your git repository

- `add` / `rm` - stage (or unstage) a local file with changes so that the changes will be saved when you commit.

- `restore` - revert local changes that have not yet been committed

- `commit` - save staged local changes

- `push` - send local committed changes to a remote git instance

- `pull` - collect committed changes from a remote git instance


## Activity

We will now make sure that everything is working correctly by making changes to the `README.md` file in the repository.

- Make a small change to `README.md` (i.e. add your name) and save the file.

- Stage & commit that change using RStudio's git GUI

- Push the changes to GitHub

- Check that the changes are reflected on GitHub


## Version control best practices

- Commit early, often, and with complete code.

- Write clear and concise commit messages.

- Test code before you commit.

- Use branches.

- Communicate with your team.

## git and GitHub resources

- git's [Pro Git](https://git-scm.com/book/en/v2) book, Chapters [Getting Started](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control) and [Git Basics](https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository) will be most useful if you are new to git and GitHub

- [Git cheatsheet](https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet) by Atlassian

- GitHub's interactive [tutorial](https://try.github.io/)

- [Free online course](https://www.udacity.com/course/version-control-with-git--ud123) from Udacity

- [Happy Git with R](http://happygitwithr.com/) by Jenny Bryan

